// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rossmcq/matchbook-go/service (interfaces: DbConnection)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/rossmcq/matchbook-go/model"
)

// MockDbConnection is a mock of DbConnection interface.
type MockDbConnection struct {
	ctrl     *gomock.Controller
	recorder *MockDbConnectionMockRecorder
}

// MockDbConnectionMockRecorder is the mock recorder for MockDbConnection.
type MockDbConnectionMockRecorder struct {
	mock *MockDbConnection
}

// NewMockDbConnection creates a new mock instance.
func NewMockDbConnection(ctrl *gomock.Controller) *MockDbConnection {
	mock := &MockDbConnection{ctrl: ctrl}
	mock.recorder = &MockDbConnectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDbConnection) EXPECT() *MockDbConnectionMockRecorder {
	return m.recorder
}

// CheckConnection mocks base method.
func (m *MockDbConnection) CheckConnection() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckConnection")
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckConnection indicates an expected call of CheckConnection.
func (mr *MockDbConnectionMockRecorder) CheckConnection() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckConnection", reflect.TypeOf((*MockDbConnection)(nil).CheckConnection))
}

// CreateGame mocks base method.
func (m *MockDbConnection) CreateGame(arg0 context.Context, arg1 model.Game) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGame", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateGame indicates an expected call of CreateGame.
func (mr *MockDbConnectionMockRecorder) CreateGame(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGame", reflect.TypeOf((*MockDbConnection)(nil).CreateGame), arg0, arg1)
}
