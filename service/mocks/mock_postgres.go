// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rossmcq/matchbook-go/service (interfaces: Store)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/rossmcq/matchbook-go/model"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CheckConnection mocks base method.
func (m *MockStore) CheckConnection() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckConnection")
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckConnection indicates an expected call of CheckConnection.
func (mr *MockStoreMockRecorder) CheckConnection() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckConnection", reflect.TypeOf((*MockStore)(nil).CheckConnection))
}

// CreateGame mocks base method.
func (m *MockStore) CreateGame(arg0 context.Context, arg1 model.Game) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGame", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateGame indicates an expected call of CreateGame.
func (mr *MockStoreMockRecorder) CreateGame(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGame", reflect.TypeOf((*MockStore)(nil).CreateGame), arg0, arg1)
}

// GetOpenGames mocks base method.
func (m *MockStore) GetOpenGames(arg0 context.Context) ([]model.Game, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOpenGames", arg0)
	ret0, _ := ret[0].([]model.Game)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOpenGames indicates an expected call of GetOpenGames.
func (mr *MockStoreMockRecorder) GetOpenGames(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOpenGames", reflect.TypeOf((*MockStore)(nil).GetOpenGames), arg0)
}

// InsertMatchOdds mocks base method.
func (m *MockStore) InsertMatchOdds(arg0 context.Context, arg1 model.MatchOdds) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertMatchOdds", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertMatchOdds indicates an expected call of InsertMatchOdds.
func (mr *MockStoreMockRecorder) InsertMatchOdds(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertMatchOdds", reflect.TypeOf((*MockStore)(nil).InsertMatchOdds), arg0, arg1)
}
