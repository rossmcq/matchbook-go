// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rossmcq/matchbook-go/service (interfaces: MatchbookClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/rossmcq/matchbook-go/model"
)

// MockMatchbookClient is a mock of MatchbookClient interface.
type MockMatchbookClient struct {
	ctrl     *gomock.Controller
	recorder *MockMatchbookClientMockRecorder
}

// MockMatchbookClientMockRecorder is the mock recorder for MockMatchbookClient.
type MockMatchbookClientMockRecorder struct {
	mock *MockMatchbookClient
}

// NewMockMatchbookClient creates a new mock instance.
func NewMockMatchbookClient(ctrl *gomock.Controller) *MockMatchbookClient {
	mock := &MockMatchbookClient{ctrl: ctrl}
	mock.recorder = &MockMatchbookClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMatchbookClient) EXPECT() *MockMatchbookClientMockRecorder {
	return m.recorder
}

// GetEvent mocks base method.
func (m *MockMatchbookClient) GetEvent(arg0 string) (model.EventResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvent", arg0)
	ret0, _ := ret[0].(model.EventResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvent indicates an expected call of GetEvent.
func (mr *MockMatchbookClientMockRecorder) GetEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvent", reflect.TypeOf((*MockMatchbookClient)(nil).GetEvent), arg0)
}

// GetMatchbookToken mocks base method.
func (m *MockMatchbookClient) GetMatchbookToken() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMatchbookToken")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetMatchbookToken indicates an expected call of GetMatchbookToken.
func (mr *MockMatchbookClientMockRecorder) GetMatchbookToken() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMatchbookToken", reflect.TypeOf((*MockMatchbookClient)(nil).GetMatchbookToken))
}

// LogoutMatchbook mocks base method.
func (m *MockMatchbookClient) LogoutMatchbook() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogoutMatchbook")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LogoutMatchbook indicates an expected call of LogoutMatchbook.
func (mr *MockMatchbookClientMockRecorder) LogoutMatchbook() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogoutMatchbook", reflect.TypeOf((*MockMatchbookClient)(nil).LogoutMatchbook))
}
